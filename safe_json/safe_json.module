<?php
/**
 * @file
 * This is part of the Safe Module. This module provides a field type for storing encrypted data.
 *
 * @author Rich Lott
 *
 */
/**
 * Implements hook_field_info.
 */
function safe_json_field_info() {
  return [
    'safe_json' => [
      'label'             => t('Encrypted text'),
      'description'       => t('Data entered will be stored encrypted.'),
      'default_widget'    => 'safe_json_widget',
      'default_formatter' => 'safe_json_formatter',
    ],
  ];
}

/**
 * Implements hook_field_validate().
 *
 */
function safe_json_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    // @todo check the format.
    if (FALSE) {
      $errors[$field['field_name']][$langcode][$delta][] = [
        'error' => 'safe_invalid_data', // See safe_json_widget_error()
        'message' => t('Invalid data'),
      ];
    }
  }
}

/**
 * Implements hook_field_is_empty().
 *
 * hook_field_is_empty() is where Drupal asks us if this field is empty.
 * Return TRUE if it does not contain data, FALSE if it does. This lets
 * the form API flag an error when required fields are empty.
 */
function safe_json_field_is_empty($item, $field) {
  return FALSE;
  return empty($item['json']);
}


/**
 * Implements hook_field_formatter_info().
 *
 */
function safe_json_field_formatter_info() {
  return [
    // This formatter just displays the hex value in the color indicated.
    'safe_decryptable_view' => [
      'label' => t('Provides decryptable text field'),
      'field types' => [ 'safe_json' ],
    ],
  ];
}

/**
 * Implements hook_field_formatter_view().
 *
 */
function safe_json_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    // This formatter simply outputs the field as text and with a color.
    case 'safe_decryptable_view':
      foreach ($items as $delta => $item) {
        // We create a render array to produce the desired markup,
        $element[$delta] = [
          '#type' => 'html_tag',
          '#tag' => 'div',
          '#attributes' => [
            'data-safe-field' => $item['json'],
            'class' => ['safe-field'],
          ],
          '#value' => 'Encrypted data',
          '#attached' => [
            'js' => [drupal_get_path('module', 'safe') . '/js/safe.js'],
          ],
        ];
      }
      break;
  }
  return $element;
}


/**
 * Implements hook_field_widget_info().
 *
 * These widget types will eventually show up in hook_field_widget_form,
 * where we will have to flesh them out.
 *
 * @see safe_json_widget_form()
 */
function safe_json_field_widget_info() {
  return [
    'safe_json_widget' => [
      'label' => t('Encrypted data'),
      'field types' => array('safe_json'),
    ],
  ];
}

/**
 * Implements hook_field_widget_form().
 *
 * hook_widget_form() is where Drupal tells us to create form elements for
 * our field's widget.
 *
 */
function safe_json_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  // We create a render array to produce the desired markup,
  $x=1;
  $widget =  [
    'json' => $element +[
      '#delta' => $delta,
      '#type' => 'textarea',
      '#default_value' => $items[$delta]['json'] ?? '',
      //'#element_validate' => ['safe_json_widget_validate'],
      '#attributes' => [
        'class' => ['safe-json-encrypted'],
      ],
      '#attached' => [
        'js' => [drupal_get_path('module', 'safe') . '/js/safe.js'],
      ],
    ],
  ];

  return $widget;
}

function safe_json_widget_validate($element, &$form_state) {
  // @todo.
}
/**
 * Implements hook_field_widget_error().
 */
function safe_json_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'safe_json_widget_error':
      form_error($element, $error['message']);
      break;
  }
}
